version: 0.2

env:
  secrets-manager:
    KONG_API_INTERNAL_ENDPOINT: "${PIPELINE_SECRETS_MANAGER_NAME}:KONG_API_INTERNAL_ENDPOINT"

    DOCKER_HUB_USERNAME: '${PIPELINE_SECRETS_MANAGER_NAME}:DOCKER_HUB_USERNAME'
    DOCKER_HUB_PASSWORD: '${PIPELINE_SECRETS_MANAGER_NAME}:DOCKER_HUB_PASSWORD'

phases:
  install:
    on-failure: ABORT
    commands:
    - echo "Starting Install Phase . . ."

    ## Log Into Docker
    - echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USERNAME --password-stdin

  pre_build:
    on-failure: ABORT
    commands:
    - echo "Starting PreBuild Phase . . ."

    # Log into docker
    - echo "Logging into ECR"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    # Setting base variables
    - SERVICE_NAME="kong-admin-api-nginx"
    - |
      if [ "$ENVIRONMENT" = "staging" ]; then
          TASK_DEFINITION_REVISION_NUMBER="2"
      elif [ "$ENVIRONMENT" = "uat" ]; then
          TASK_DEFINITION_REVISION_NUMBER="5"
      elif [ "$ENVIRONMENT" = "production" ]; then
          TASK_DEFINITION_REVISION_NUMBER="1"
      fi

    # Setting endpoint variables
    ## Configured in pipeline variables

    # Setting path variables
    - CONFIG_FILE_PATH="deploy_config/nginx/api-proxy.conf"

    - DOCKERFILE_PATH="AdminAPIDockerfile"
    - DOCKERCOMPOSE_FILE_PATH="docker-compose.yml"
    - |
      if [ "$ENVIRONMENT" = "dev" ]; then
          CODEDEPLOY_APPSPEC_FILE_PATH="deploy_config/ec2-appspec.yml"
          CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH="deploy_config/dev/scripts/application_start_hook.sh"
      else
          CODEDEPLOY_APPSPEC_FILE_PATH="deploy_config/ecs-appspec.yml"
      fi

    # Getting commit number for docker image
    - echo "Getting Github Commit"
    - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
    - IMAGE_TAG=${COMMIT_HASH:=latest}

    # Move appspec file over to root dir
    - mv $CODEDEPLOY_APPSPEC_FILE_PATH ./appspec.yml && CODEDEPLOY_APPSPEC_FILE_PATH="appspec.yml"

  build:
    on-failure: ABORT
    commands:
    - echo "Starting Build Phase . . ."

    # Replacing credentials
    - sed -i "s|INSERT_ADMIN_API_INTERNAL_ENDPOINT|$KONG_API_INTERNAL_ENDPOINT|" $CONFIG_FILE_PATH

    # Setting CodeDeploy and AppSpec config depending on the environment
    - |
      if [ "$ENVIRONMENT" = "dev" ]; then
          # Inserting codedeploy config settings
          sed -i "s|INSERT_SOURCE_FILE_DESTINATION|$CODEDEPLOY_SOURCE_FILE_DESTINATION|" $CODEDEPLOY_APPSPEC_FILE_PATH

          sed -i "s|INSERT_SOURCE_FILE_DESTINATION|$CODEDEPLOY_SOURCE_FILE_DESTINATION|" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
          sed -i "s/INSERT_AWS_ACCOUNT_ID/$AWS_ACCOUNT_ID/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
          sed -i "s/INSERT_AWS_REGION/$AWS_REGION/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
          sed -i "s|INSERT_ECR_REPO_NAME|$ECR_APP_REPO_URL|g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
      else
          # Get Current Task Definition
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN:$TASK_DEFINITION_REVISION_NUMBER | jq '.taskDefinition' > taskdef.json

          # Replacing appspec placeholders
          sed -i "s|INSERT_TASK_DEFINITION_ARN|$TASK_DEFINITION_ARN|" $CODEDEPLOY_APPSPEC_FILE_PATH
          sed -i "s/INSERT_REVISION_NUMBER/$TASK_DEFINITION_REVISION_NUMBER/" $CODEDEPLOY_APPSPEC_FILE_PATH
          sed -i "s/INSERT_CONTAINER_NAME/$SERVICE_NAME/" $CODEDEPLOY_APPSPEC_FILE_PATH
          sed -i "s/INSERT_CONTAINER_PORT/$SERVER_PORT/" $CODEDEPLOY_APPSPEC_FILE_PATH
          sed -i "s/INSERT_SUBNETS/$SUBNET/" $CODEDEPLOY_APPSPEC_FILE_PATH
          sed -i "s/INSERT_SECURITY_GROUP/$SECURITY_GROUP/" $CODEDEPLOY_APPSPEC_FILE_PATH
          sed -i "s/INSERT_CAPACITY_PROVIDER_NAME/$CAPACITY_PROVIDER/" $CODEDEPLOY_APPSPEC_FILE_PATH
      fi

    # Replacing docker placeholders
    - echo "Getting Ready to Build Docker Image"
    # - sed -i "s|INSERT_BASE_IMAGE|$ECR_BASE_IMAGE_REPO_URL:$ECR_BASE_IMAGE_REPO_TAG|g" $DOCKERFILE_PATH
    - sed -i "s|INSERT_ENVIRONMENT|$ENVIRONMENT|g" $DOCKERFILE_PATH
    - sed -i "s|INSERT_RELEASE_DATE|$CURRENT_TIMESTAMP|" $DOCKERFILE_PATH

    # Replacing docker compose placeholders
    ## Build Section
    - sed -i "s/INSERT_SERVICE_NAME/$SERVICE_NAME/" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s|INSERT_IMAGE_NAME|$ECR_APP_REPO_URL|g" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s/INSERT_IMAGE_TAG/latest/" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s/INSERT_CONTANER_NAME/$SERVICE_NAME/" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s|INSERT_DOCKERFILE_PATH|$DOCKERFILE_PATH|" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s/INSERT_SERVER_PORT/$SERVER_PORT/g" $DOCKERCOMPOSE_FILE_PATH
    ## Environment Section
    - sed -i "s|INSERT_ENVIRONMENT|$ENVIRONMENT|" $DOCKERCOMPOSE_FILE_PATH

    # Building docker image
    - docker compose -f $DOCKERCOMPOSE_FILE_PATH build

  post_build:
    commands:
    - echo "Starting PostBuild Phase . . ."

    # Pushing docker image to ECR
    - docker tag $ECR_APP_REPO_URL:latest $ECR_APP_REPO_URL:$IMAGE_TAG
    - docker tag $ECR_APP_REPO_URL:latest $ECR_APP_REPO_URL:latest
    - docker push $ECR_APP_REPO_URL:$IMAGE_TAG
    - docker push $ECR_APP_REPO_URL:latest

    # Setting artifact files
    - mkdir artifacts
    - |
      if [ "$ENVIRONMENT" = "dev" ] ; then
          mv * artifacts; cp -r artifacts/* .
      else
          cp $CODEDEPLOY_APPSPEC_FILE_PATH taskdef.json artifacts/
      fi

artifacts:
  base-directory: artifacts/
  files:
  - '**/*'
