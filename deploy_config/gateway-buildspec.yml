version: 0.2

env:
  secrets-manager:
    # Common App Secrets
    KONG_DASHBOARD_ENDPOINT: "${COMMON_APP_SECRETS_MANAGER_NAME}:KONG_DASHBOARD_ENDPOINT"

    # App Secrets
    POSTGRE_KONG_GATEWAY_HOST: "${APP_SECRETS_MANAGER_NAME}:POSTGRE_KONG_GATEWAY_HOST"
    POSTGRE_KONG_GATEWAY_USERNAME: "${APP_SECRETS_MANAGER_NAME}:POSTGRE_KONG_GATEWAY_USERNAME"
    POSTGRE_KONG_GATEWAY_PASSWORD: "${APP_SECRETS_MANAGER_NAME}:POSTGRE_KONG_GATEWAY_PASSWORD"

    # Pipeline Secrets
    SLACK_CHANNEL_ID: '${PIPELINE_SECRETS_MANAGER_NAME}:SLACK_NOTIFICATION_CHANNEL_ID'
    SLACK_BOT_TOKEN: '${PIPELINE_SECRETS_MANAGER_NAME}:SLACK_BOT_TOKEN'
    GITHUB_TOKEN: '${PIPELINE_SECRETS_MANAGER_NAME}:GITHUB_TOKEN'
    DOCKER_HUB_USERNAME: '${PIPELINE_SECRETS_MANAGER_NAME}:DOCKER_HUB_USERNAME'
    DOCKER_HUB_PASSWORD: '${PIPELINE_SECRETS_MANAGER_NAME}:DOCKER_HUB_PASSWORD'

phases:
  install:
    on-failure: ABORT
    commands:
    - echo "Starting Install Phase . . ."

    ## Log Into Docker
    - echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USERNAME --password-stdin

    ## Installing Trivy
    - sudo apt-get install wget gnupg
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
    - echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
    - sudo apt-get update
    - sudo apt-get install trivy

    ## Install python libraries for report generator
    - pip install slack_sdk requests

    ## Downloading Script files from S3
    - aws s3 cp s3://${S3_BUCKET_NAME}/generate_scan_report.py deploy_config/generate_scan_report.py
    - aws s3 cp s3://${S3_BUCKET_NAME}/git_status_check.py deploy_config/git_status_check.py

  pre_build:
    on-failure: ABORT
    commands:
    - echo "Starting PreBuild Phase . . ."

    # Log into docker
    - echo "Logging into ECR"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    # Setting base variables
    - SERVICE_NAME="oceanhunter-kong-gateway"
    - |
      if [ "$ENVIRONMENT" = "staging" ]; then
        # TASK_DEFINITION_REVISION_NUMBER="3" # 0.5vCPU, 2GB
        TASK_DEFINITION_REVISION_NUMBER="13" # 2vCPU, 4GB
      elif [ "$ENVIRONMENT" = "uat" ]; then
        TASK_DEFINITION_REVISION_NUMBER="6"
      elif [ "$ENVIRONMENT" = "production" ]; then
        TASK_DEFINITION_REVISION_NUMBER="4"
        # TASK_DEFINITION_REVISION_NUMBER="18"
      fi
    - REPO_NAME="oceanhunter-kong-dashboard"
    - ORGANIZATION_NAME="bituslabs"
    - CURRENT_TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

    # Setting endpoint variables
    ## Configured in pipeline variables

    # Setting path variables
    - CONFIG_FILE_PATH="src/config.ts"
    - AUTH_SIGN_HANDLER_LUA_FILE_PATH="plugins/auth-sign/handler.lua"

    - DOCKERFILE_PATH="GatewayDockerfile"
    - DOCKERCOMPOSE_FILE_PATH="docker-compose.yml"
    - SCAN_REPORT_FILE_PATH="deploy_config/generate_scan_report.py"
    - GITHUB_STATUS_CHECK_FILE_PATH="deploy_config/git_status_check.py"
    - |
      if [ "$ENVIRONMENT" = "dev" ]; then
        CODEDEPLOY_APPSPEC_FILE_PATH="deploy_config/ec2-appspec.yml"
        CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH="deploy_config/dev/scripts/gateway_application_start_hook.sh"
        sed -i "s|deploy_config/dev/scripts/application_start_hook.sh|deploy_config/dev/scripts/gateway_application_start_hook.sh|" $CODEDEPLOY_APPSPEC_FILE_PATH
      else
        CODEDEPLOY_APPSPEC_FILE_PATH="deploy_config/ecs-appspec.yml"
      fi

    # Getting commit number for docker image
    - echo "Getting Github Commit"
    - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
    - IMAGE_TAG=${COMMIT_HASH:=latest}

    # Adding Status Check (Pending)
    - STATUS=pending python "$GITHUB_STATUS_CHECK_FILE_PATH"

    # Move appspec file over to root dir
    - mv $CODEDEPLOY_APPSPEC_FILE_PATH ./appspec.yml && CODEDEPLOY_APPSPEC_FILE_PATH="appspec.yml"

  build:
    on-failure: ABORT
    commands:
    - echo "Starting Build Phase . . ."

    # Replacing credentials
    # - sed -i "s|INSERT_SECRET_KEY|$KONG_GATEWAY_API_SECRET_KEY|" $AUTH_SIGN_HANDLER_LUA_FILE_PATH # Setting CodeDeploy and AppSpec config depending on the environment

    - |
      if [ "$ENVIRONMENT" = "dev" ]; then
        # Inserting codedeploy config settings
        sed -i "s|INSERT_SOURCE_FILE_DESTINATION|$CODEDEPLOY_SOURCE_FILE_DESTINATION|" $CODEDEPLOY_APPSPEC_FILE_PATH

        sed -i "s|INSERT_SOURCE_FILE_DESTINATION|$CODEDEPLOY_SOURCE_FILE_DESTINATION|" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_AWS_ACCOUNT_ID/$AWS_ACCOUNT_ID/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_AWS_REGION/$AWS_REGION/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s|INSERT_ECR_REPO_NAME|$ECR_APP_REPO_URL|g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH

        # Replacing application start script placeholders
        sed -i "s/INSERT_SERVICE_NAME/$SERVICE_NAME/" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH

        sed -i "s/INSERT_MAIN_HTTP_PORT/$GATEWAY_MAIN_HTTP_PORT/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_MAIN_HTTPS_PORT/$GATEWAY_MAIN_HTTPS_PORT/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_API_HTTP_PORT/$GATEWAY_API_HTTP_PORT/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_API_HTTPS_PORT/$GATEWAY_API_HTTPS_PORT/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_KONG_GATEWAY_HTTP_PORT/$GATEWAY_HTTP_PORT/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_KONG_GATEWAY_HTTPS_PORT/$GATEWAY_HTTPS_PORT/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH

        sed -i "s|INSERT_KONG_DASHBOARD_ENDPOINT|$KONG_DASHBOARD_ENDPOINT|g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH

        sed -i "s/INSERT_POSTGRE_KONG_GATEWAY_PORT/$POSTGRE_KONG_GATEWAY_PORT/" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_POSTGRE_KONG_GATEWAY_HOST/$POSTGRE_KONG_GATEWAY_HOST/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_POSTGRE_KONG_GATEWAY_USERNAME/$POSTGRE_KONG_GATEWAY_USERNAME/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_POSTGRE_KONG_GATEWAY_PASSWORD/$POSTGRE_KONG_GATEWAY_PASSWORD/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH

        sed -i "s|INSERT_IMAGE_NAME|$ECR_APP_REPO_URL|g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
        sed -i "s/INSERT_IMAGE_TAG/latest/" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
      else
        # Get Current Task Definition
        aws ecs describe-task-definition --task-definition $GATEWAY_TASK_DEFINITION_ARN:$TASK_DEFINITION_REVISION_NUMBER | jq '.taskDefinition' > taskdef.json

        # Replacing appspec placeholders
        sed -i "s|INSERT_TASK_DEFINITION_ARN|$GATEWAY_TASK_DEFINITION_ARN|" $CODEDEPLOY_APPSPEC_FILE_PATH
        sed -i "s/INSERT_REVISION_NUMBER/$TASK_DEFINITION_REVISION_NUMBER/" $CODEDEPLOY_APPSPEC_FILE_PATH
        sed -i "s/INSERT_CONTAINER_NAME/$SERVICE_NAME/" $CODEDEPLOY_APPSPEC_FILE_PATH
        sed -i "s/INSERT_CONTAINER_PORT/$SERVER_PORT/" $CODEDEPLOY_APPSPEC_FILE_PATH
        sed -i "s/INSERT_SUBNETS/$SUBNET/" $CODEDEPLOY_APPSPEC_FILE_PATH
        sed -i "s/INSERT_SECURITY_GROUP/$SECURITY_GROUP/" $CODEDEPLOY_APPSPEC_FILE_PATH
        sed -i "s/INSERT_CAPACITY_PROVIDER_NAME/$CAPACITY_PROVIDER/" $CODEDEPLOY_APPSPEC_FILE_PATH
      fi
    # Replacing docker placeholders
    - echo "Getting Ready to Build Docker Image"
    # - sed -i "s|INSERT_BASE_IMAGE|$ECR_BASE_IMAGE_REPO_URL:$ECR_BASE_IMAGE_REPO_TAG|g" $DOCKERFILE_PATH
    - sed -i "s|INSERT_BASE_IMAGE|$ECR_APP_REPO_URL:latest|g" $DOCKERFILE_PATH
    - sed -i "s|INSERT_ENVIRONMENT|$ENVIRONMENT|g" $DOCKERFILE_PATH
    - sed -i "s|INSERT_RELEASE_DATE|$CURRENT_TIMESTAMP|" $DOCKERFILE_PATH

    # Replacing docker compose placeholders
    ## Build Section
    - sed -i "s/INSERT_SERVICE_NAME/$SERVICE_NAME/" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s|INSERT_IMAGE_NAME|$ECR_APP_REPO_URL|g" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s/INSERT_IMAGE_TAG/latest/" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s/INSERT_CONTANER_NAME/$SERVICE_NAME/" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s|INSERT_DOCKERFILE_PATH|$DOCKERFILE_PATH|" $DOCKERCOMPOSE_FILE_PATH
    - sed -i "s/INSERT_SERVER_PORT/$SERVER_PORT/g" $DOCKERCOMPOSE_FILE_PATH
    ## Environment Section
    - sed -i "s|INSERT_ENVIRONMENT|$ENVIRONMENT|" $DOCKERCOMPOSE_FILE_PATH

    # Building docker image
    - docker compose -f $DOCKERCOMPOSE_FILE_PATH build

  post_build:
    commands:
    - echo "Starting PostBuild Phase . . ."

    # Scanning Image using Trivy
    - |
      if [ "$ENVIRONMENT" = "dev" ] ; then
        trivy image --scanners vuln,misconfig -f json $ECR_APP_REPO_URL:latest -o scan_report.json
        DOCKERFILE_VULNS=$(jq '.Results[] | select(.Type == "dockerfile") | .MisconfSummary.Failures // 0' scan_report.json)
        DEPENDENCY_VULNS=$(jq '[.Results[].Vulnerabilities | length] | add // 0' scan_report.json)
        
        if [ "$DOCKERFILE_VULNS" -gt 0 ] || [ "$DEPENDENCY_VULNS" -gt 0 ]; then
          echo "Vulnerabilities found. Generating report..."

          trivy image --scanners vuln,misconfig --quiet $ECR_APP_REPO_URL:latest -o scan_report.txt --table-mode detailed
          python "$SCAN_REPORT_FILE_PATH"

          echo "Adding Git Status Check (Failed)"
          STATUS=failure python "$GITHUB_STATUS_CHECK_FILE_PATH"

          # exit 1
        else
          echo "No vulnerabilities found, skipping script."
        fi
      fi

    # Adding Git Status Check (Success)
    - STATUS=success python "$GITHUB_STATUS_CHECK_FILE_PATH"

    # Pushing docker image to ECR
    - docker tag $ECR_APP_REPO_URL:latest $ECR_APP_REPO_URL:$IMAGE_TAG
    - docker tag $ECR_APP_REPO_URL:latest $ECR_APP_REPO_URL:latest
    - docker push $ECR_APP_REPO_URL:$IMAGE_TAG
    - docker push $ECR_APP_REPO_URL:latest

    # Setting artifact files
    - mkdir artifacts
    - |
      if [ "$ENVIRONMENT" = "dev" ] ; then
        mv * artifacts; cp -r artifacts/* .
      else
        cp $CODEDEPLOY_APPSPEC_FILE_PATH taskdef.json artifacts/
      fi

artifacts:
  base-directory: artifacts/
  files:
  - '**/*'
