version: 0.2

env:
    secrets-manager:
        KONG_GATEWAY_INTERNAL_ENDPOINT: "agfish-dev-pipeline-secrets:KONG_GATEWAY_INTERNAL_ENDPOINT"

        SLACK_CHANNEL_ID: 'agfish-dev-pipeline-secrets:BACKOFFICE_NOTIFICATION_CHANNEL_ID'
        SLACK_BOT_TOKEN: 'agfish-dev-pipeline-secrets:BACKOFFICE_SLACK_BOT_TOKEN'
        GITHUB_TOKEN: 'agfish-dev-pipeline-secrets:GITHUB_TOKEN'

phases:
    install:
        commands:
            - echo "Starting Install Phase . . ."

            ## Using Trivy
            - echo "Installing Trivy"
            - sudo apt-get install wget gnupg
            - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
            - echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            - sudo apt-get update
            - sudo apt-get install trivy

            - pip install slack_sdk requests

    pre_build:
        commands:
            - echo "Starting PreBuild Phase . . ."

            # Log into docker
            - echo "Logging into ECR"
            - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            # Setting base variables
            - SERVICE_NAME="agfish-kong-dashboard"
            - ENVIRONMENT="dev"
            - REPO_NAME="oceanhunter-kong-dashboard"
            - ORGANIZATION_NAME="bituslabs"
            - CURRENT_TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

            # Setting endpoint variables
            ## Configured in pipeline variables

            # Setting path variables
            - CONFIG_FILE_PATH="src/config.ts"

            - DOCKERFILE_PATH="Dockerfile"
            - DOCKERCOMPOSE_FILE_PATH="docker-compose.yml"
            - SCAN_REPORT_FILE_PATH="deploy_config/generate_scan_report.py"
            - GITHUB_STATUS_CHECK_FILE_PATH="deploy_config/git_status_check.py"
            - CODEDEPLOY_APPSPEC_FILE_PATH="deploy_config/dev/appspec.yml"
            - CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH="deploy_config/dev/scripts/application_start_hook.sh"

            # Getting commit number for docker image
            - echo "Getting Github Commit"
            - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
            - IMAGE_TAG=${COMMIT_HASH:=latest}

            # Adding Status Check (Pending)
            - STATUS=pending python "$GITHUB_STATUS_CHECK_FILE_PATH" 

            # Move appspec file over to root dir
            - mv $CODEDEPLOY_APPSPEC_FILE_PATH ./appspec.yml && CODEDEPLOY_APPSPEC_FILE_PATH="appspec.yml"

    build:
        commands:
            - echo "Starting Build Phase . . ."

            # Inserting Endpoints
            - sed -i "INSERT_GATEWAY_INTERNAL_ENDPOINT|$KONG_GATEWAY_INTERNAL_ENDPOINT|" $ENV_FILE_PATH

            # Inserting codedeploy config settings
            - sed -i "s|INSERT_SOURCE_FILE_DESTINATION|$CODEDEPLOY_SOURCE_FILE_DESTINATION|" $CODEDEPLOY_APPSPEC_FILE_PATH

            - sed -i "s|INSERT_SOURCE_FILE_DESTINATION|$CODEDEPLOY_SOURCE_FILE_DESTINATION|" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
            - sed -i "s/INSERT_AWS_ACCOUNT_ID/$AWS_ACCOUNT_ID/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
            - sed -i "s/INSERT_AWS_REGION/$AWS_REGION/g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH
            - sed -i "s|INSERT_ECR_REPO_NAME|$ECR_APP_REPO_URL|g" $CODEDEPLOY_APPLICATION_START_HOOK_FILE_PATH

            # Replacing docker placeholders
            - echo "Getting Ready to Build Docker Image"
            - sed -i "s|INSERT_BASE_IMAGE|$ECR_BASE_IMAGE_REPO_URL:$ECR_BASE_IMAGE_REPO_TAG|g" $DOCKERFILE_PATH
            - sed -i "s|INSERT_ENVIRONMENT|$ENVIRONMENT|g" $DOCKERFILE_PATH
            - sed -i "s|INSERT_RELEASE_DATE|$CURRENT_TIMESTAMP|" $DOCKERFILE_PATH

            # Replacing docker compose placeholders
            ## Build Section
            - sed -i "s/INSERT_SERVICE_NAME/$SERVICE_NAME/" $DOCKERCOMPOSE_FILE_PATH
            - sed -i "s|INSERT_IMAGE_NAME|$ECR_APP_REPO_URL|g" $DOCKERCOMPOSE_FILE_PATH
            - sed -i "s/INSERT_IMAGE_TAG/latest/" $DOCKERCOMPOSE_FILE_PATH
            - sed -i "s/INSERT_CONTANER_NAME/$SERVICE_NAME/" $DOCKERCOMPOSE_FILE_PATH
            - sed -i "s|INSERT_DOCKERFILE_PATH|$DOCKERFILE_PATH|" $DOCKERCOMPOSE_FILE_PATH
            - sed -i "s/INSERT_SERVER_PORT/$SERVER_PORT/g" $DOCKERCOMPOSE_FILE_PATH
            ## Environment Section
            - sed -i "s|INSERT_ENVIRONMENT|$ENVIRONMENT|" $DOCKERCOMPOSE_FILE_PATH

            # Building docker image
            - docker compose -f $DOCKERCOMPOSE_FILE_PATH build

    post_build:
        commands:
            - echo "Starting PostBuild Phase . . ."

            # Scanning Image using Trivy
            - trivy image --scanners vuln,misconfig -f json $ECR_APP_REPO_URL:latest -o scan_report.json
            - DOCKERFILE_VULNS=$(jq '.Results[] | select(.Type == "dockerfile") | .MisconfSummary.Failures // 0' scan_report.json)
            - DEPENDENCY_VULNS=$(jq '[.Results[].Vulnerabilities | length] | add // 0' scan_report.json)
            - |
                if [ "$DOCKERFILE_VULNS" -gt 0 ] || [ "$DEPENDENCY_VULNS" -gt 0 ]; then
                    echo "Vulnerabilities found. Generating report..."
                    
                    trivy image --scanners vuln,misconfig --quiet $ECR_APP_REPO_URL:latest -o scan_report.txt --table-mode detailed
                    python "$SCAN_REPORT_FILE_PATH"
                    
                    echo "Adding Git Status Check (Failed)"
                    STATUS=failure python "$GITHUB_STATUS_CHECK_FILE_PATH"

                    exit 1
                else
                    echo "No vulnerabilities found, skipping script."
                fi

            # Adding Git Status Check (Success)
            - STATUS=success python "$GITHUB_STATUS_CHECK_FILE_PATH"

            # Pushing docker image to ECR
            - docker tag $ECR_APP_REPO_URL:latest $ECR_APP_REPO_URL:$IMAGE_TAG
            - docker tag $ECR_APP_REPO_URL:latest $ECR_APP_REPO_URL:latest
            - docker push $ECR_APP_REPO_URL:$IMAGE_TAG
            - docker push $ECR_APP_REPO_URL:latest

artifacts:
    files:
        - '**/*'
